{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/FilterType.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedTodo","openTodo","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","query","filterType","onQueryChange","onFilterTypeChange","value","onChange","target","placeholder","event","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","TodoModal","closeTodo","useState","currentUser","setCurrentUser","fetchUser","a","userId","user","Error","console","warn","message","useEffect","href","email","name","App","setTodos","setSelectedTodo","isLoadingError","setIsLoadingError","isDataLoading","setIsDataLoading","setQuery","ALL","setFilterType","visibleTodos","inputQuery","currentTodos","trim","toLowerCase","filter","includes","ACTIVE","COMPLETED","filteredTodos","fetchTodos","data","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd45ff6c.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  openTodo: (todo: Todo) => void\n};\n\nexport const TodoList: React.FC<Props> = (\n  {\n    todos,\n    selectedTodo,\n    openTodo,\n  },\n) => {\n  const isSelectedTodo = (id: number) => selectedTodo?.id === id;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={classNames(\n              { 'has-background-info-light': selectedTodo },\n            )}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              {isSelectedTodo(todo.id) ? (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye-slash\" />\n                  </span>\n                </button>\n              ) : (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => openTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye\" />\n                  </span>\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  query: string,\n  filterType: FilterType,\n  onQueryChange: (query:string) => void,\n  onFilterTypeChange: (filterType: FilterType) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = (\n  {\n    query,\n    filterType,\n    onQueryChange,\n    onFilterTypeChange,\n  },\n) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterType}\n          onChange={({ target }) => {\n            onFilterTypeChange(target.value as FilterType);\n          }}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => onQueryChange(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => {\n              onQueryChange('');\n            }}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","/* eslint-disable no-console */\nimport React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo | null,\n  closeTodo: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, closeTodo }) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n\n  const fetchUser = async () => {\n    try {\n      const user = await getUser(selectedTodo?.userId || 0);\n\n      setCurrentUser(user);\n    } catch (error) {\n      if (error instanceof Error) {\n        console.warn(error.message);\n      } else {\n        console.warn('Unexpected error');\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!currentUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {`${selectedTodo?.title}`}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              {selectedTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${currentUser.email}`}>\n                {`${currentUser.name}`}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { FilterType } from './types/FilterType';\n\nconst filteredTodos = (\n  todos: Todo[],\n  inputQuery: string,\n  filterType: FilterType,\n) => {\n  let currentTodos = [...todos];\n\n  if (inputQuery) {\n    const query = inputQuery.trim().toLowerCase();\n\n    currentTodos = currentTodos.filter(\n      todo => todo.title.toLowerCase().includes(query),\n    );\n  }\n\n  switch (filterType) {\n    case FilterType.ACTIVE:\n      currentTodos = currentTodos.filter(todo => !todo.completed);\n      break;\n    case FilterType.COMPLETED:\n      currentTodos = currentTodos.filter(todo => todo.completed);\n      break;\n    default:\n      break;\n  }\n\n  return currentTodos;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [isDataLoading, setIsDataLoading] = useState(true);\n  const [query, setQuery] = useState<string>('');\n  const [filterType, setFilterType] = useState(FilterType.ALL);\n\n  const visibleTodos = filteredTodos(todos, query, filterType);\n\n  const fetchTodos = async () => {\n    try {\n      const data = await getTodos();\n\n      setTodos(data);\n      setIsDataLoading(false);\n      setIsDataLoading(false);\n    } catch {\n      setIsLoadingError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const openTodo = useCallback((todo: Todo) => {\n    setSelectedTodo(todo);\n  }, [selectedTodo]);\n\n  const closeTodo = useCallback(() => {\n    setSelectedTodo(null);\n  }, [selectedTodo]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                filterType={filterType}\n                onQueryChange={setQuery}\n                onFilterTypeChange={setFilterType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isDataLoading && <Loader />}\n              {isLoadingError\n                ? <p>Error of loading data</p>\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodo={selectedTodo}\n                    openTodo={openTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo\n      && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          closeTodo={closeTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}